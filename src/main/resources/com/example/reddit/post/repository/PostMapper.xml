<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.reddit.post.repository.PostMapper">
    <select id="getPatinatedPostsWithoutInteractions" resultType="PostInfoWithoutInteractions">
        SELECT
            u.id, u.username, 
            p.id AS postId, 
            p.created_at AS postCreatedAt, 
            p.updated_at AS postUpdatedAt, 
            p.title, p.content, p.view_count, 
            p.vote_points, p.like_points, 
            p.confused_points, p.laugh_points, p.comment_amounts 
        FROM post p 
        LEFT JOIN user u ON p.user_id = u.id 
        WHERE p.created_at <![CDATA[ < ]]> #{timeFrame}
        <if test="dateSpec != null">
            AND p.created_at > #{dateSpec}
        </if>
        <if test="votePointsLowest != null">
            AND p.vote_points > #{votePointsLowest}
        </if>
        <if test="laughPointsLowest != null">
            AND p.laugh_points > #{laughPointsLowest}
        </if>
        <if test="likePointsLowest != null">
            AND p.like_points > #{likePointsLowest}
        </if>
        ORDER BY p.created_at DESC LIMIT #{fetchAmountPlusOne} OFFSET #{offset}
    </select>

    <select id="getPatinatedPostsWithInteractions" resultType="PostInfoWithInteractions">
        SELECT
            u.id, u.username, 
            p.id AS postId, 
            p.created_at AS postCreatedAt, 
            p.updated_at AS postUpdatedAt, 
            p.title, p.content, p.view_count, 
            p.vote_points, p.like_points, 
            p.confused_points, p.laugh_points, 
            p.comment_amounts, i.vote_status, i.like_status,
            i.laugh_status, i.confused_status  
        FROM post p 
        LEFT JOIN user u ON p.user_id = u.id 
        LEFT JOIN interactions i ON i.post_id = p.id AND i.user_id = #{meId}
        WHERE p.created_at <![CDATA[ < ]]> #{timeFrame}
        <if test="dateSpec != null">
            AND p.created_at > #{dateSpec}
        </if>
        <if test="votePointsLowest != null">
            AND p.vote_points > #{votePointsLowest}
        </if>
        <if test="laughPointsLowest != null">
            AND p.laugh_points > #{laughPointsLowest}
        </if>
        <if test="likePointsLowest != null">
            AND p.like_points > #{likePointsLowest}
        </if>
        ORDER BY p.created_at DESC LIMIT #{fetchAmountPlusOne} OFFSET #{offset}
    </select>
</mapper>